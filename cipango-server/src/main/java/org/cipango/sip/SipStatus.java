// ========================================================================
// Copyright 2008-2009 NEXCOM Systems
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at 
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ========================================================================

package org.cipango.sip;

import org.cipango.SipGrammar;
import org.eclipse.jetty.io.Buffer;
import org.eclipse.jetty.io.BufferCache;
import org.eclipse.jetty.io.ByteArrayBuffer;

public class SipStatus 
{
	public final static String 
		TRYING = "Trying", 
		RINGING = "Ringing",
		CALL_IS_BEING_FORWARDED = "Call Is Being Forwarded",
		QUEUED = "Queued",
		SESSION_PROGRESS = "Session Progress",
		
		OK = "OK",
		ACCEPTED = "Accepted",
		
		MULTIPLE_CHOICES = "Multiple Choices",
		MOVED_PERMANENTLY = "Moved Permanently",
		MOVED_TEMPORARILY = "Moved Temporarily",
		USE_PROXY = "Use Proxy",
		ALTERNATE_SERVICE = "Alternative Service",
		
		BAD_REQUEST = "Bad Request",
		UNAUTHORIZED = "Unauthorized",
		PAYEMENT_REQUIRED = "Payment Required",
		FORBIDDEN = "Forbidden",
		NOT_FOUND = "Not Found",
		METHOD_NOT_ALLOWED = "Method Not Allowed",
		NOT_ACCEPTABLE = "Not Acceptable",
		PROXY_AUTHENTICATION_REQUIRED = "Proxy Authentication Required",
		REQUEST_TIMEOUT = "Request Timeout",
		GONE = "Gone",
		CONDITIONAL_REQUEST_FAILED = "Conditional Request Failed",
		REQUEST_ENTITY_TOO_LARGE = "Request Entity Too Large",
		REQUEST_URI_TOO_LONG = "Request-URI Too Long",
		UNSUPPORTED_MEDIA_TYPE = "Unsupported Media Type",
		UNSUPPORTED_URI_SCHEME = "Unsupported URI Scheme",
		UNKNOWN_RESOURCE_PRIORITY = "Unknown Resource-Priority",
		BAD_EXTENSION = "Bad Extension",
		EXTENSION_REQUIRED = "Extension Required",
		SESSION_INTERVAL_TOO_SMALL = "Session Interval Too Small",
		INTERVAL_TOO_BRIEF = "Interval Too Brief",
		USE_IDENTITY_HEADER = "Use Identity Header",
		PROVIDE_REFERRER_IDENTITY = "Provide Referrer Identity",
		BAD_IDENTITY_INFO = "Bad Identity-Info",
		UNSUPPORTED_CERTIFICATE = "Unsupported Certificate",
		INVALID_IDENTITY_HEADER = "Invalid Identity Header",
		TEMPORARILY_UNAVAILABLE = "Temporarily Unavailable",
		CALL_TRANSACTION_DOES_NOT_EXIST = "Call/Transaction Does Not Exist",
		LOOP_DETECTED = "Loop Detected",
		TOO_MANY_HOPS = "Too Many Hops",
		ADDRESS_IMCOMPLETE = "Address Incomplete",
		AMBIGUOUS = "Ambiguous",
		BUSY_HERE = "Busy Here",
		REQUEST_TERMINATED = "Request Terminated",
		NOT_ACCEPTABLE_HERE = "Not Acceptable Here",
		BAD_EVENT = "Bad Event",
		REQUEST_PENDING = "Request Pending",
		UNDECIPHERABLE = "Undecipherable",
		SECURITY_AGREEMENT_REQUIRED = "Security Agreement Required",
		
		SERVER_INTERNAL_ERROR = "Server Internal Error",
		NOT_IMPLEMENTED = "Not Implemented",
		BAD_GATEWAY = "Bad Gateway",
		SERVICE_UNAVAILABLE = "Service Unavailable",
		SERVER_TIMEOUT = "Server Time-out",
		VERSION_NOT_SUPPORTED = "Version Not Supported",
		MESSAGE_TOO_LARGE = "Message Too Large",
		PRECONDITION_FAILURE = "Precondition Failure",
		
		BUSY_EVERYWHERE = "Busy Everywhere",
		DECLINE = "Decline",
		DOES_NOT_EXIST_ANYWHERE = "Does Not Exist Anywhere",
		NOT_ACCEPTABLE_6 = "Not Acceptable";
	    
	public final static int 
		ORDINAL_100_TRYING = 100,
		ORDINAL_180_RINGING = 180,
		ORDINAL_181_CALL_IS_BEING_FORWARDED = 181,
		ORDINAL_182_QUEUED = 182,
		ORDINAL_183_SESSION_PROGRESS = 183,
		
		ORDINAL_200_OK = 200,
		ORDINAL_202_ACCEPTED = 202,
		
		ORDINAL_300_MULTIPLE_CHOICES = 300,
		ORDINAL_301_MOVED_PERMANENTLY = 301,
		ORDINAL_302_MOVED_TEMPORARILY = 302,
		ORDINAL_305_USE_PROXY = 305,
		ORDINAL_380_ALTERNATE_SERVICE = 380,
		
		ORDINAL_400_BAD_REQUEST = 400,
		ORDINAL_401_UNAUTHORIZED = 401,
		ORDINAL_402_PAYEMENT_REQUIRED = 402,
		ORDINAL_403_FORBIDDEN = 403,
		ORDINAL_404_NOT_FOUND = 404,
		ORDINAL_405_METHOD_NOT_ALLOWED = 405,
		ORDINAL_406_NOT_ACCEPTABLE = 406,
		ORDINAL_407_PROXY_AUTHENTICATION_REQUIRED = 407,
		ORDINAL_408_REQUEST_TIMEOUT = 408,
		ORDINAL_410_GONE = 410,
		ORDINAL_412_CONDITIONAL_REQUEST_FAILED = 412,
		ORDINAL_413_REQUEST_ENTITY_TOO_LARGE = 413,
		ORDINAL_414_REQUEST_URI_TOO_LONG = 414,
		ORDINAL_415_UNSUPPORTED_MEDIA_TYPE = 415,
		ORDINAL_416_UNSUPPORTED_URI_SCHEME = 416,
		ORDINAL_417_UNKNOWN_RESOURCE_PRIORITY = 417,
		ORDINAL_420_BAD_EXTENSION = 420,
		ORDINAL_421_EXTENSION_REQUIRED = 421,
		ORDINAL_422_SESSION_INTERVAL_TOO_SMALL = 422,
		ORDINAL_423_INTERVAL_TOO_BRIEF = 423,
		ORDINAL_428_USE_IDENTITY_HEADER = 428,
		ORDINAL_429_PROVIDE_REFERRER_IDENTITY = 429,
		ORDINAL_436_BAD_IDENTITY_INFO = 436,
		ORDINAL_437_UNSUPPORTED_CERTIFICATE = 437,
		ORDINAL_438_INVALID_IDENTITY_HEADER = 438,
		ORDINAL_480_TEMPORARILY_UNAVAILABLE = 480,
		ORDINAL_481_CALL_TRANSACTION_DOES_NOT_EXIST = 481,
		ORDINAL_482_LOOP_DETECTED = 482,
		ORDINAL_483_TOO_MANY_HOPS = 483,
		ORDINAL_484_ADDRESS_IMCOMPLETE = 484,
		ORDINAL_485_AMBIGUOUS = 485,
		ORDINAL_486_BUSY_HERE = 486,
		ORDINAL_487_REQUEST_TERMINATED = 487,
		ORDINAL_488_NOT_ACCEPTABLE_HERE = 488,
		ORDINAL_489_BAD_EVENT = 489,
		ORDINAL_491_REQUEST_PENDING = 491,
		ORDINAL_493_UNDECIPHERABLE = 493,
		ORDINAL_494_SECURITY_AGREEMENT_REQUIRED = 494,
		
		ORDINAL_500_SERVER_INTERNAL_ERROR = 500,
		ORDINAL_501_NOT_IMPLEMENTED = 501,
		ORDINAL_502_BAD_GATEWAY = 502,
		ORDINAL_503_SERVICE_UNAVAILABLE = 503,
		ORDINAL_504_SERVER_TIMEOUT = 504,
		ORDINAL_505_VERSION_NOT_SUPPORTED = 505,
		ORDINAL_513_MESSAGE_TOO_LARGE = 513,
		ORDINAL_580_PRECONDITION_FAILURE = 580,
		
		ORDINAL_600_BUSY_EVERYWHERE = 600,
		ORDINAL_603_DECLINE = 603,
		ORDINAL_604_DOES_NOT_EXIST_ANYWHERE = 604,
		ORDINAL_606_NOT_ACCEPTABLE = 606;
	
    public static final BufferCache CACHE = new BufferCache();

	public static final Buffer
		TRYING_BUFFER = CACHE.add(TRYING, ORDINAL_100_TRYING),
		RINGING_BUFFER = CACHE.add(RINGING, ORDINAL_180_RINGING),
		CALL_IS_BEING_FORWARDED_BUFFER = CACHE.add(CALL_IS_BEING_FORWARDED, ORDINAL_181_CALL_IS_BEING_FORWARDED),
		QUEUED_BUFFER = CACHE.add(QUEUED, ORDINAL_182_QUEUED),
		SESSION_PROGRESS_BUFFER = CACHE.add(SESSION_PROGRESS, ORDINAL_183_SESSION_PROGRESS),
		
		OK_BUFFER = CACHE.add(OK, ORDINAL_200_OK),
		ACCEPTED_BUFFER = CACHE.add(ACCEPTED, ORDINAL_202_ACCEPTED),
		
		MULTIPLE_CHOICES_BUFFER = CACHE.add(MULTIPLE_CHOICES, ORDINAL_300_MULTIPLE_CHOICES),
		MOVED_PERMANENTLY_BUFFER = CACHE.add(MOVED_PERMANENTLY, ORDINAL_301_MOVED_PERMANENTLY),
		MOVED_TEMPORARILY_BUFFER = CACHE.add(MOVED_TEMPORARILY, ORDINAL_302_MOVED_TEMPORARILY),
		USE_PROXY_BUFFER = CACHE.add(USE_PROXY, ORDINAL_305_USE_PROXY),
		ALTERNATE_SERVICE_BUFFER = CACHE.add(ALTERNATE_SERVICE, ORDINAL_380_ALTERNATE_SERVICE),
		
		BAD_REQUEST_BUFFER = CACHE.add(BAD_REQUEST, ORDINAL_400_BAD_REQUEST),
		UNAUTHORIZED_BUFFER = CACHE.add(UNAUTHORIZED, ORDINAL_401_UNAUTHORIZED),
		PAYEMENT_REQUIRED_BUFFER = CACHE.add(PAYEMENT_REQUIRED, ORDINAL_402_PAYEMENT_REQUIRED),
		FORBIDDEN_BUFFER = CACHE.add(FORBIDDEN, ORDINAL_403_FORBIDDEN),
		NOT_FOUND_BUFFER = CACHE.add(NOT_FOUND, ORDINAL_404_NOT_FOUND),
		METHOD_NOT_ALLOWED_BUFFER = CACHE.add(METHOD_NOT_ALLOWED, ORDINAL_405_METHOD_NOT_ALLOWED),
		NOT_ACCEPTABLE_BUFFER = CACHE.add(NOT_ACCEPTABLE, ORDINAL_406_NOT_ACCEPTABLE),
		PROXY_AUTHENTICATION_REQUIRED_BUFFER = CACHE.add(PROXY_AUTHENTICATION_REQUIRED, ORDINAL_407_PROXY_AUTHENTICATION_REQUIRED),
		REQUEST_TIMEOUT_BUFFER = CACHE.add(REQUEST_TIMEOUT, ORDINAL_408_REQUEST_TIMEOUT),
		GONE_BUFFER = CACHE.add(GONE, ORDINAL_410_GONE),
		CONDITIONAL_REQUEST_FAILED_BUFFER = CACHE.add(CONDITIONAL_REQUEST_FAILED, ORDINAL_412_CONDITIONAL_REQUEST_FAILED),
		REQUEST_ENTITY_TOO_LARGE_BUFFER = CACHE.add(REQUEST_ENTITY_TOO_LARGE, ORDINAL_413_REQUEST_ENTITY_TOO_LARGE),
		REQUEST_URI_TOO_LONG_BUFFER = CACHE.add(REQUEST_URI_TOO_LONG, ORDINAL_414_REQUEST_URI_TOO_LONG),
		UNSUPPORTED_MEDIA_TYPE_BUFFER = CACHE.add(UNSUPPORTED_MEDIA_TYPE, ORDINAL_415_UNSUPPORTED_MEDIA_TYPE),
		UNSUPPORTED_URI_SCHEME_BUFFER = CACHE.add(UNSUPPORTED_URI_SCHEME, ORDINAL_416_UNSUPPORTED_URI_SCHEME),
		UNKNOWN_RESOURCE_PRIORITY_BUFFER = CACHE.add(UNKNOWN_RESOURCE_PRIORITY, ORDINAL_417_UNKNOWN_RESOURCE_PRIORITY),
		BAD_EXTENSION_BUFFER = CACHE.add(BAD_EXTENSION, ORDINAL_420_BAD_EXTENSION),
		EXTENSION_REQUIRED_BUFFER = CACHE.add(EXTENSION_REQUIRED, ORDINAL_421_EXTENSION_REQUIRED),
		SESSION_INTERVAL_TOO_SMALL_BUFFER = CACHE.add(SESSION_INTERVAL_TOO_SMALL, ORDINAL_422_SESSION_INTERVAL_TOO_SMALL),
		INTERVAL_TOO_BRIEF_BUFFER = CACHE.add(INTERVAL_TOO_BRIEF, ORDINAL_423_INTERVAL_TOO_BRIEF),
		USE_IDENTITY_HEADER_BUFFER = CACHE.add(USE_IDENTITY_HEADER, ORDINAL_428_USE_IDENTITY_HEADER),
		PROVIDE_REFERRER_IDENTITY_BUFFER = CACHE.add(PROVIDE_REFERRER_IDENTITY, ORDINAL_429_PROVIDE_REFERRER_IDENTITY),
		BAD_IDENTITY_INFO_BUFFER = CACHE.add(BAD_IDENTITY_INFO, ORDINAL_436_BAD_IDENTITY_INFO),
		UNSUPPORTED_CERTIFICATE_BUFFER = CACHE.add(UNSUPPORTED_CERTIFICATE, ORDINAL_437_UNSUPPORTED_CERTIFICATE),
		INVALID_IDENTITY_HEADER_BUFFER = CACHE.add(INVALID_IDENTITY_HEADER, ORDINAL_438_INVALID_IDENTITY_HEADER),
		TEMPORARILY_UNAVAILABLE_BUFFER = CACHE.add(TEMPORARILY_UNAVAILABLE, ORDINAL_480_TEMPORARILY_UNAVAILABLE),
		CALL_TRANSACTION_DOES_NOT_EXIST_BUFFER = CACHE.add(CALL_TRANSACTION_DOES_NOT_EXIST, ORDINAL_481_CALL_TRANSACTION_DOES_NOT_EXIST),
		LOOP_DETECTED_BUFFER = CACHE.add(LOOP_DETECTED, ORDINAL_482_LOOP_DETECTED),
		TOO_MANY_HOPS_BUFFER = CACHE.add(TOO_MANY_HOPS, ORDINAL_483_TOO_MANY_HOPS),
		ADDRESS_IMCOMPLETE_BUFFER = CACHE.add(ADDRESS_IMCOMPLETE, ORDINAL_484_ADDRESS_IMCOMPLETE),
		AMBIGUOUS_BUFFER = CACHE.add(AMBIGUOUS, ORDINAL_485_AMBIGUOUS),
		BUSY_HERE_BUFFER = CACHE.add(BUSY_HERE, ORDINAL_486_BUSY_HERE),
		REQUEST_TERMINATED_BUFFER = CACHE.add(REQUEST_TERMINATED, ORDINAL_487_REQUEST_TERMINATED),
		NOT_ACCEPTABLE_HERE_BUFFER = CACHE.add(NOT_ACCEPTABLE_HERE, ORDINAL_488_NOT_ACCEPTABLE_HERE),
		BAD_EVENT_BUFFER = CACHE.add(BAD_EVENT, ORDINAL_489_BAD_EVENT),
		REQUEST_PENDING_BUFFER = CACHE.add(REQUEST_PENDING, ORDINAL_491_REQUEST_PENDING),
		UNDECIPHERABLE_BUFFER = CACHE.add(UNDECIPHERABLE, ORDINAL_493_UNDECIPHERABLE),
		SECURITY_AGREEMENT_REQUIRED_BUFFER = CACHE.add(SECURITY_AGREEMENT_REQUIRED, ORDINAL_494_SECURITY_AGREEMENT_REQUIRED),
		
		SERVER_INTERNAL_ERROR_BUFFER = CACHE.add(SERVER_INTERNAL_ERROR, ORDINAL_500_SERVER_INTERNAL_ERROR),
		NOT_IMPLEMENTED_BUFFER = CACHE.add(NOT_IMPLEMENTED, ORDINAL_501_NOT_IMPLEMENTED),
		BAD_GATEWAY_BUFFER = CACHE.add(BAD_GATEWAY, ORDINAL_502_BAD_GATEWAY),
		SERVICE_UNAVAILABLE_BUFFER = CACHE.add(SERVICE_UNAVAILABLE, ORDINAL_503_SERVICE_UNAVAILABLE),
		SERVER_TIMEOUT_BUFFER = CACHE.add(SERVER_TIMEOUT, ORDINAL_504_SERVER_TIMEOUT),
		VERSION_NOT_SUPPORTED_BUFFER = CACHE.add(VERSION_NOT_SUPPORTED, ORDINAL_505_VERSION_NOT_SUPPORTED),
		MESSAGE_TOO_LARGE_BUFFER = CACHE.add(MESSAGE_TOO_LARGE, ORDINAL_513_MESSAGE_TOO_LARGE),
		PRECONDITION_FAILURE_BUFFER = CACHE.add(PRECONDITION_FAILURE, ORDINAL_580_PRECONDITION_FAILURE),
		
		BUSY_EVERYWHERE_BUFFER = CACHE.add(BUSY_EVERYWHERE, ORDINAL_600_BUSY_EVERYWHERE),
		DECLINE_BUFFER = CACHE.add(DECLINE, ORDINAL_603_DECLINE),
		DOES_NOT_EXIST_ANYWHERE_BUFFER = CACHE.add(DOES_NOT_EXIST_ANYWHERE, ORDINAL_604_DOES_NOT_EXIST_ANYWHERE),
		NOT_ACCEPTABLE_6_BUFFER = CACHE.add(NOT_ACCEPTABLE_6, ORDINAL_606_NOT_ACCEPTABLE);
	
	private static Buffer[] responseLine = new Buffer[607];
	
	static 
	{
		int versionLength = SipVersions.SIP_2_0_BUFFER.length();
		for (int i = 0; i < responseLine.length; i++) 
		{
			Buffer reason = CACHE.get(i);
			if (reason == null) 
				continue;
		
			byte[] bytes = new byte[versionLength + 5 + reason.length() + 2];
			SipVersions.SIP_2_0_BUFFER.peek(0, bytes, 0, versionLength);
			bytes[versionLength + 0] = SipGrammar.SPACE;
            bytes[versionLength + 1] = (byte) ('0' + i / 100);
            bytes[versionLength + 2] = (byte) ('0' + (i % 100) / 10);
            bytes[versionLength + 3] = (byte) ('0' + (i % 10));
            bytes[versionLength + 4] = SipGrammar.SPACE;
            reason.peek(0, bytes, versionLength + 5, reason.length());
            bytes[versionLength + 5 + reason.length()] = SipGrammar.CR;
            bytes[versionLength + 6 + reason.length()] = SipGrammar.LF;
            
            responseLine[i] = new ByteArrayBuffer(bytes, 0, bytes.length, Buffer.IMMUTABLE);
		}
	}
	    
	public static Buffer getResponseLine(int status)
	{
		if (status >= responseLine.length)
			return null;
		return responseLine[status];
	}
	
	public static String getReason(int status)
	{
		if (status >= responseLine.length)
			return null;
		return CACHE.get(status).toString();
	}
}
