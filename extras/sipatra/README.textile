h1. SIPATRA

Sipatra is a simple Sinatra like Ruby DSL for SIP Servlets. It's heavily inspired from Sinatra and was adapted only in those areas that were required by differences between the HTTP and SIP protocols. Sipatra is written is JRuby and targets SIP Servlet 1.1 compatible application servers

Sipatra is a work in progress. The Ruby DSL may change without notice.

h2. Handlers

In Sipatra an handler is a SIP method paired with an URI matching pattern and some conditions. Each handler is associated with a block:

<pre>
invite 'sip:standard@.*' do
    proxy "sip:0123456789@#{msg.requestURI.host}"
    puts "VIA    : '#{headers[:Via].join(", ")}'"
    puts "CONTACT: '#{header['Contact']}'"
    
    send_response 200, "OK", 'X-Header' => 'Foo'
end

register do
    proxy
end
</pre>

Those handlers have to be put in a file called @WEB-INF/sipatra/application.rb@ and you need to add the following declaration to your @WEB-INF/sip.xml@. Handlers exist for the following SIP methods: ACK, BYE, CANCEL, INFO, INVITE, MESSAGE, NOTIFY, OPTIONS, PRACK, PUBLISH, REFER, REGISTER, SUBSCRIBE, UPDATE (http://en.wikipedia.org/wiki/List_of_SIP_request_methods).

Helper methods like @send_response@ are available to handler writers in order to reduce the amount of code necessary for common tasks.

To use Sipatra in your SIP applications, just add the following declaration to you @WEB-INF/sip.xml@ file together with the dependencies listed below.

<pre>
  <servlet>
      <servlet-name>sipatra</servlet-name>
      <servlet-class>org.cipango.sipatra.JRubyServlet</servlet-class>
      <load-on-startup/>
  </servlet>
</pre>

h3. Helper methods

Handlers have access to helper methods which permit to concisely implement common SIP Servlet call patterns.

@send_response@ generates a response and sends it:

<pre>
send_response :ok
send_response :not_found, "Number was not found"
send_response :ok, :Date => Time::now.httpdate
send_response :ok do |res|
 res.setHeader("Date", Time::now.httpdate)
end
</pre>

@create_address@ creates an address header:

<pre>
create_address('sip:12345@domain.com')
create_address('sip:12345@domain.com', :expires => 1234, :display_name => 'Foo')
</pre>

h2. Dependencies

In order to use the sipatra-0.1-SNAPSHOT.jar you also need to put those jars into your @WEB-INF/lib@ directory.

 * http://jruby.org.s3.amazonaws.com/downloads/1.5.1/jruby-complete-1.5.1.jar
 * sipatra-0.1-SNAPSHOT.jar


h2. Sample application

A very simple, yet functionnal, "sample application":http://github.com/dbroeglin/sipatra-sample-app featuring a Sipatra application alongside a Sinatra is available. It's packaged with "Warbler":http://kenai.com/projects/warbler/pages/Home wich makes it even simpler to try.
